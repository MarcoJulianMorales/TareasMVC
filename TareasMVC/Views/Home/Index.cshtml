@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer localizer;

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">@localizer["Mis Tareas"]</h1>
    @*<p>@localizer["Aprende"]</p>*@
</div>
<button type="button" class="btn btn-primary mb-3" onclick="agregarNuevaTarea()">@localizer["Nueva"]</button>

<div id="contenedor-listado-tareas" class="text-center">
    <div id="reordenable" class="text-start" data-bind="foreach: tareas">
        <div name="tarea" class="border mb-2 p-2" style="cursor: pointer">
            <div data-bind="text: titulo, hidden: esNuevo" class="fw-bold"></div>

            <input type="text" name="titulo-tarea" autocomplete="off" 
                    data-bind="value: titulo, visible: esNuevo, attr: {'data-id': id}, event: {focusout: manejarFocusOutTituloTarea}"/>
        </div>
    </div>

    <div data-bind="visible: cargando" class="spinner-border">
        <span class="visually-hidden">Cargando...</span>
    </div>

    <div data-bind="visible: noHayTareas">No existen tareas para mostrar</div>
</div>

@*<button onclick="mostrarError()">Error</button>*@

@section Scripts{
    <script src="~/js/Utilidades.js"></script>
    <script src="~/js/tareas.js" asp-append-version="true"></script>

    <script>
        const urlTareas = "/api/Tareas";

        function tareaListadoViewModelFn() {
            var self = this;
            self.tareas = ko.observableArray([]);
            self.cargando =  ko.observable(true);

            self.noHayTareas = ko.pureComputed(function () {
                if(self.cargando()){
                    return false;
                }

                return self.tareas().length === 0;
            })
        }

        function tareaElementoListadoViewModel({id, titulo}){
            var self = this;
            self.id = ko.observable(id);
            self.titulo = ko.observable(titulo);
            self.esNuevo = ko.pureComputed(function (){
                return self.id() === 0;
            })
        }

        const tareaListadoViewModel = new tareaListadoViewModelFn();

        //setTimeout(() => {
        //    //tareaListadoViewModel.tareas.push({titulo: 'Tarea1'});
        //    tareaListadoViewModel.cargando(false);
        //}, 1000);

        obtenerTareas();

        ko.applyBindings(tareaListadoViewModel, document.getElementById('contenedor-listado-tareas'));
    </script>
}